using System;using System.ComponentModel;using System.Windows;using System.Windows.Threading;namespace UI.ViewModel{    abstract class ViewModelBase : INotifyPropertyChanged    {        public event PropertyChangedEventHandler PropertyChanged;        internal void RaisePropertyChanged(string prop)        {            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(prop));        }        bool? _closeWindowFlag;        public bool? CloseWindowFlag        {            get => _closeWindowFlag;            set            {                _closeWindowFlag = value;                RaisePropertyChanged("CloseWindowFlag");            }        }        public virtual void CloseWindow(bool? result = true)        {            Application.Current.Dispatcher.BeginInvoke(DispatcherPriority.Background, new Action(() =>            {                CloseWindowFlag = (CloseWindowFlag == null) ? true : !CloseWindowFlag;            }));        }    }}